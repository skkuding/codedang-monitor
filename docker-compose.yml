services:
  caddy:
    profiles: [ "caddy" ]
    image: caddy:2.7.6-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    network_mode: host

  minio:
    profiles: [ "log", "trace" ]
    container_name: minio
    image: minio/minio:latest
    volumes:
      - minio_data_volume:/data
    environment:
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    command: server data --address ':${MINIO_PORT:-9000}' --console-address ':${MINIO_CONSOLE_PORT:-9001}'
    shm_size: "1gb"

  createbuckets:
    profiles: [ "log", "trace" ]
    image: minio/mc
    volumes:
      - minio_data_volume:/data
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add minio http://minio:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; /usr/bin/mc mb data/loki-aws; /usr/bin/mc mb data/loki-stage; /usr/bin/mc mb data/tempo; /usr/bin/mc anonymous set public data/tempo; /usr/bin/mc anonymous set public data/loki-aws; /usr/bin/mc anonymous set public data/loki-stage; exit 0; "

  loki-stage:
    profiles: [ "log" ]
    image: grafana/loki:latest
    container_name: loki-stage
    environment:
      - MINIO_ROOT_PASSWORD
      - MINIO_ROOT_USER
      - MINIO_BUCKET_NAME=loki-stage
    ports:
      - "${LOKI_STAGE_PORT:-3100}:3100"
    volumes:
      - "./config/loki/loki-config.yml:/etc/loki/loki-config.yml"
    command: -config.file=/etc/loki/loki-config.yml -config.expand-env=true
    depends_on:
      - minio
    restart: always

  loki-aws:
    profiles: [ "log" ]
    image: grafana/loki:latest
    container_name: loki-aws
    environment:
      - MINIO_ROOT_PASSWORD
      - MINIO_ROOT_USER
      - MINIO_BUCKET_NAME=loki-aws
    ports:
      - "${LOKI_AWS_PORT:-3100}:3100"
    volumes:
      - "./config/loki/loki-config.yml:/etc/loki/loki-config.yml"
    command: -config.file=/etc/loki/loki-config.yml -config.expand-env=true
    depends_on:
      - minio
    restart: always

  prometheus:
    profiles: [ "metric" ]
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - "./config/prometheus/prometheus-config.yml:/etc/prometheus/prometheus-config.yml"
      - "./config/prometheus/rules:/etc/prometheus/rules"
      - prometheus_data_volume:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus-config.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-remote-write-receiver'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always

  alertmanager:
    profiles: [ "metric" ]
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - "./config/alertmanager/config.yml:/etc/alertmanager/config.yml"
    command:
      - '--config.file=/etc/alertmanager/config.yml'
    ports:
      - "9093:9093"
    restart: always

  prometheus-msteams:
    profiles: [ "metric" ]
    image: docker.io/bzon/prometheus-msteams:v1.1.4
    container_name: prometheus-msteams
    restart: always
    environment:
      - TEAMS_INCOMING_WEBHOOK_URL=${MS_WEBHOOK_URL}
      - TEAMS_REQUEST_URI=alertmanager
    expose:
      - "2000"

  check-instance:
    profiles: [ "metric" ]
    build: ./check-instance
    environment:
      - WEBHOOK_URL=${MS_WEBHOOK_URL}
    container_name: check-instance
    volumes:
      - check_instance_data_volume:/app
    depends_on:
      - prometheus
    restart: always

  tempo:
    profiles: [ "trace" ]
    image: grafana/tempo:latest
    container_name: tempo
    environment:
      - MINIO_ROOT_PASSWORD
      - MINIO_ROOT_USER
      - MINIO_PORT
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp http
    volumes:
      - ./config/tempo/tempo.yml:/etc/tempo.yml
    command:
      - "-config.file=/etc/tempo.yml"
      - "-config.expand-env=true"
    depends_on:
      - minio
    restart: unless-stopped

  grafana:
    profiles: [ "log", "trace", "metric" ]
    image: grafana/grafana:latest
    environment:
      - GF_APP_MODE # production | development
      - GF_STMP_HOST
      - GF_SMTP_USER
      - GF_SMTP_PASSWORD
      - GF_AUTH_ANONYMOUS_ENABLED
      - GF_AUTH_ANONYMOUS_ORG_ROLE
      - GH_CLIENT_ID
      - GH_CLIENT_SECRET
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - "grafana_storage:/var/lib/grafana"
      - "./config/grafana:/etc/grafana"

volumes:
  grafana_storage: {}
  minio_data_volume:
  prometheus_data_volume:
  check_instance_data_volume:
