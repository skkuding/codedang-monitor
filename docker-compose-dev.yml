services:
  caddy:
    image: caddy:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile/dev:/etc/caddy/Caddyfile
    command: caddy run --config /etc/caddy/Caddyfile

  minio:
    container_name: minio
    image: minio/minio:latest
    volumes:
      - minio_data_volume:/data
    environment:
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
    ports:
      - "9000:9000" # minio
      - "9001:9001" # minio console
    command: server data --address ':9000' --console-address ':9001'
    shm_size: "1gb"

  createbuckets:
    image: minio/mc
    volumes:
      - minio_data_volume:/data
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c \ "/usr/bin/mc config host add minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; \ /usr/bin/mc mb data/loki; /usr/bin/mc mb data/tempo; /usr/bin/mc anonymous set public data/tempo; \ /usr/bin/mc anonymous set public data/loki; \ exit 0;"

  loki:
    image: grafana/loki:latest
    container_name: loki
    environment:
      - MINIO_ROOT_PASSWORD
      - MINIO_ROOT_USER
      - MINIO_BUCKET_NAME=loki
    ports:
      - "3100:3100" # loki(without console)
    volumes:
      - "./backends/loki:/etc/loki"
    command: -config.file=/etc/loki/loki-config.yml -config.expand-env=true
    depends_on:
      - minio
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090" # prometheus(with console)
    volumes:
      - "./backends/prometheus:/etc/prometheus"
      - prometheus_data_volume:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus-config.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-remote-write-receiver'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - "./etc/alertmanager:/etc/alertmanager"
    command:
      - '--config.file=/etc/alertmanager/config.yml'
    ports:
      - "9093:9093" # alertmanager(with console)
    restart: always

  prometheus-msteams:
    image: docker.io/bzon/prometheus-msteams:v1.1.4
    container_name: prometheus-msteams
    restart: always
    environment:
      - TEAMS_INCOMING_WEBHOOK_URL=${MS_WEBHOOK_URL}
      - TEAMS_REQUEST_URI=alertmanager
    expose:
      - "2000"

  check-instance:
    build: ./check-instance
    environment:
      - WEBHOOK_URL=${MS_WEBHOOK_URL}
    container_name: check-instance
    volumes:
      - check_instance_data_volume:/app
    depends_on:
      - prometheus
    restart: always

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    environment:
      - MINIO_ROOT_PASSWORD
      - MINIO_ROOT_USER
    ports:
      - "3200:3200" # tempo console
      - "4317:4317" # otlp grpc
    volumes:
      - ./backends/tempo:/etc
    command:
      - "-config.file=/etc/tempo.yml"
      - "-config.expand-env=true"
    depends_on:
      - minio
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_APP_MODE=development
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - "./grafana:/etc/grafana"
      - "grafana_storage:/var/lib/grafana"

volumes:
  grafana_storage: {}
  minio_data_volume:
  prometheus_data_volume:
  check_instance_data_volume:
